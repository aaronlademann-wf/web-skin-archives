//----------------------------------------------------

//+ PARTIAL:  _forms-cbox-radio.scss
//+ PARENT:   _forms.scss

//
// For Web Skin Checkboxes / Radios...
// label:before is the appearance of the empty checkbox/radio
// label:after acts as the active "indicator" appearance
//
// Assuming you have some markup like this:
//
// <div class="checkbox checkbox-pretty">
//     <input type="checkbox" id="cbox1">
//     <label for="cbox1">Errmegerd, its a label!</label>
// </div>
//
// OR
//
// <div class="radio radio-pretty">
//     <input type="radio" id="radio1">
//     <label for="radio1">Errmegerd, its a label!</label>
// </div>
//

//----------------------------------------------------

// TODO: Deprecate the necessity for .checkbox-pretty and .radio-pretty (0.5.0)

//
// GLOBAL RESETS / ALIGNMENTS
//
    @mixin radioIndicator {
        top: $radioIndicatorOffsetTop;
        left: $radioIndicatorOffsetLeft;
        width: $radioIndicatorSize;
        height: $radioIndicatorSize;
    }
    @mixin cboxIndicator {
        top: $radioIndicatorOffsetTop - pxtoem($inputBdWidth, $cboxDefaultParentFontSize);
        left: $radioIndicatorOffsetLeft - pxtoem($inputBdWidth, $cboxDefaultParentFontSize);
        width: $radioIndicatorSize + pxtoem(($inputBdWidth * 2), $cboxDefaultParentFontSize);
        height: $radioIndicatorSize + pxtoem(($inputBdWidth * 2), $cboxDefaultParentFontSize);
    }
    @mixin cboxAndRadioGlobal {
        position: absolute;
        z-index: 3; // keep above everything else so it is the target on click events
        float: none;
        cursor: pointer;

        // must hide this to prevent mozilla suckage:
        // https://bugzilla.mozilla.org/show_bug.cgi?id=605985
        padding: 0;
        margin: 0;
        overflow: hidden;
        // use opacity instead of visibility: hidden; in order to allow the inputs to gain :focus
        @include opacity(0);
        .no-touch & {
            // do not use clip() on touch devices because it causes (https://github.com/WebFilings/web-skin/issues/611)
            // but we do need to use it on devices that use a mouse/hover HCI pattern in order to only have
            // to declare our :hover style on the parent .radio/.checkbox
            clip: rect(0,0,0,0);
        }
    }


//
// SCREEN ONLY STYLES
//
    @media screen {
        //
        // ALL RADIOS AND CHECKBOXES
        //
            .radio-pretty {
                &.radio,
                &.radio-inline {
                    input[type="radio"] {
                        @include cboxAndRadioGlobal;
                        // even though this elem is hidden - we still should have it
                        // line up / mimic the appearance of the "fake" input we're showing.
                        @include radioIndicator;
                    }
                }
            }
            .checkbox-pretty {
                &.checkbox,
                &.checkbox-inline {
                    input[type="checkbox"] {
                        @include cboxAndRadioGlobal;
                        // even though this elem is hidden - we still should have it
                        // line up / mimic the appearance of the "fake" input we're showing.
                        @include cboxIndicator;
                    }
                }
            }

            .radio-pretty.radio,
            .radio-pretty.radio-inline,
            .checkbox-pretty.checkbox,
            .checkbox-pretty.checkbox-inline {
                position: relative;
                min-height: $cboxHeight;
                font-family: $fontFamilyBase;
                vertical-align: middle;
                cursor: pointer;

                label {
                    position: relative;
                    display: block;
                    margin: 0;
                    text-indent: $cboxWidth + pxtoem(5px, $cboxDefaultParentFontSize);

                    // the square / circle mimicing the checkbox/radio
                    &:before {
                        @include box-sizing(border-box);
                        position: absolute;
                        top: $cboxRadioTopOffset; // center on line-height of the label
                        left: 0;
                        z-index: 1;
                        width: $cboxWidth;
                        height: $cboxHeight;
                        background-color: $bodyBg;
                        border: $inputBdWidth solid $cboxBdColor;
                        content: "";
                        box-shadow: $inputShadowInner;
                    }

                    // the "indicator" (checkmark or circle)
                    &:after {
                        @include box-sizing(border-box);
                        @include opacity(0);
                        position: absolute;
                        z-index: 2; // keep above bg
                        line-height: 1;
                        content: "";
                        // opacity doesn't work with psuedo elems in IE 8
                        visibility: hidden;
                    }

                    // hover
                    #{$hover} {
                        &:after {
                            @include opacity(.3);
                            // opacity doesn't work with psuedo elems in IE 8
                            visibility: visible;
                        }
                    }

                    // pressed
                    #{$linkPressed} {
                        &:before {
                            border-color: $cboxBdColorFocus;
                        }
                        &:after {
                            @include opacity(1);
                            // opacity doesn't work with psuedo elems in IE 8
                            visibility: visible;
                        }
                    }
                }

                // :checked/:indeterminate styles have to be their own
                // statement not-to-be combined with any other selectors
                // you expect MSIE 8 to read / process.
                input:checked,
                input:indeterminate {
                    + label:after {
                        @include opacity(1);
                        visibility: visible;
                    }
                }

                // focused
                input:focus,
                input.focus {
                    + label:before {
                        border-color: $cboxBdColorFocus;
                    }
                }

                // IE 8 doesn't understand :checked or :indeterminate
                @include ie('<9') {
                    // IE8 just ignores :checked and :indeterminate,
                    // so it shows all checkboxes/radios as selected / indeterminate
                    // unless we reset it here, and re-apply the selected / indeterminate
                    // styling using .checked / .indeterminate
                    input:checked,
                    input:indeterminate {
                        + label:before {
                            border-color: $cboxBdColor;
                        }
                        + label:after {
                            // opacity doesn't work with psuedo elems in IE8
                            visibility: hidden;
                        }
                    }
                    input.checked,
                    input[checked],
                    input.indeterminate {
                        &:focus,
                        &.focus {
                            + label:before {
                                border-color: $cboxBdColorFocus;
                            }
                        }
                        + label:after {
                            // opacity doesn't work with psuedo elems in IE 8
                            visibility: visible;
                        }
                    }
                    // restate all the other opacities for specificity
                    label {
                        #{$hover} {
                            &:before {
                                border-color: $cboxBdColorFocus;
                            }
                            &:after {
                                // opacity doesn't work with psuedo elems in IE 8
                                visibility: hidden;
                            }
                        }

                        #{$linkPressed} {
                            &:before {
                                border-color: $cboxBdColorFocus;
                            }
                            &:after {
                                // opacity doesn't work with psuedo elems in IE 8
                                visibility: visible;
                            }
                        }
                    }
                }

                // disabled
                &.disabled {
                    cursor: not-allowed;

                    label {
                        @include opacity($disabledAlphaDefault);
                        color: $inputColorDisabled;
                        cursor: not-allowed;

                        &,
                        #{$linkPressed} {
                            &:before {
                                border-color: $cboxBdColor;
                            }
                            &:after {
                                @include opacity(0);
                                // opacity doesn't work with psuedo elems in IE 8
                                visibility: hidden;
                            }
                        }
                    }
                }
            }

    } // END @media screen


//
// SCREEN AND PRINT STYLES
//
    //
    // ALL RADIOS AND CHECKBOXES
    //
        .radio,
        .checkbox,
        .radio-inline,
        .checkbox-inline {
            // TODO: remove the & when deprecating .checkbox-pretty (0.5.0)
            &,
            label {
                display: inline; // TODO: remove when deprecating .checkbox-pretty (0.5.0)
                font-family: $fontFamilyBase;
                font-weight: normal;
                cursor: pointer;
            }
        }


    //
    // STACKED RADIOS AND CHEKBOXES
    //
        .radio,
        .checkbox {
            display: block;
            margin-top: $lineHeightBasePx / 2;
            margin-bottom: $lineHeightBasePx / 2;

            + .radio,
            + .checkbox {
                // Move up sibling radios or checkboxes for tighter spacing
                margin-top: -$spacingBase;
            }
        }


    //
    // INLINE RADIOS AND CHECKBOXES
    //
        .radio-inline,
        .checkbox-inline {
            display: inline-block;
            @include ie7-inline-block;

            @if $ie-support {
                input[type="checkbox"],
                input[type="radio"] {
                    margin-top: $radioCboxTopMargin;
                }
            }

            + .radio-inline,
            + .checkbox-inline {
                margin-top: 0;
                // space out consecutive inline controls
                margin-left: $cboxRadioSpacing / 2;
            }
        }


//
// SCREEN ONLY STYLES
//
    @media screen {

        //
        // RADIO ONLY
        //
            .radio-pretty {
                &.radio,
                &.radio-inline {
                    &,
                    label:before,
                    label:after {
                        @include border-radius(50%); // makes it a circle
                    }

                    label {
                        &:after {
                            @include radioIndicator;
                            background-color: $cboxBgColorChecked;
                        }

                        // pressed
                        #{$linkPressed} {
                            &:after {
                                background-color: $cboxBgColorChecked;
                            }
                        }
                    }
                }
            }


        //
        // CHECKBOX ONLY
        //
            .checkbox-pretty {
                &.checkbox,
                &.checkbox-inline {
                    &,
                    label:before {
                        @include border-radius(pxtoem($borderRadiusBase, $cboxDefaultParentFontSize));
                    }

                    // checked
                    label:after {
                        $iconOffset: 0;
                        top: $cboxRadioTopOffset + $iconOffset;
                        left: $iconOffset;
                        font-family: $mainIconsFont;
                        font-size: $cboxHeight;
                        color: $cboxBgColorChecked;
                        text-indent: 0;
                        content: "\e600"; // mimics .icon-checkmark
                    }

                    // indeterminate
                    // :indeterminate has to be its own selector
                    // for .indeterminate to be a valid selector in MSIE 8
                    input:indeterminate + label:after {
                        content: "\e606"; // mimics .icon-minus
                    }
                    input.indeterminate + label:after {
                        content: "\e606"; // mimics .icon-minus
                    }
                }
            }

    } // END @media screen
