//----------------------------------------------------

//+  PARTIAL:  _scaffolding.scss
//+  PARENT:   wdesk.scss

    // Basic and global styles for
    // structural layout, and page templates

    // related partials:
    //+ "_foundation.scss"

//----------------------------------------------------


//
// Reset the box-sizing
//
* {
    @include box-sizing($box-sizing-default);
    // disable tap highlight and
    // turn off text selection at this level so accidental drag/move
    // actions don't cause huge selected bgcolors all over the page
    // we turn this ::selection functionality back on
    // on a per-selector basis below using elements-of-type(selectable)
    @include disableUserSelect;
    @if $mozilla-support {
        -moz-font-feature-settings: "liga" 0;
    }

    #{$linkFocus} {
        outline: 0;
    }
}


//
// body / base elem reset
//
#{$baseElem} {
    margin: 0;
    color: $textColor;
    background-color: if($baseElem == "body", $bodyBg, transparent);
    font-family: $fontFamilyBase;
    font-size: $fontSizeBase;
    line-height: $lineHeightBase;
}

//
// Custom text selection characteristics
//
// for selectable elems only
//
#{elements-of-type(selectable)} {
    @include enableUserSelect;
}


//
// Links
//
.hitarea,
.btn {
    cursor: pointer;
    // reset in-case its used with a <button> or <input> elem
    @include buttonReset;

    // if the hitarea is "active", typically it is no longer clickable
    .active > &:not([data-toggle]),
    &.active:not([data-toggle]) {
        cursor: default;
    }
}

a,
.text-link {
    cursor: pointer;
    text-decoration: none;
    color: $linkColor;
    outline: 0;

    #{$linkHoverFocus} {
        text-decoration: underline;
        color: $linkColorHover;
    }
    #{$linkPressed} {
        color: $linkColorPressed;
    }
}


//
// Images
//
.img-responsive {
    @include imgResponsive;
}

// Rounded corners
.img-rounded {
    border-radius: $borderRadiusLarge;
}

// Image thumbnails
.img-thumbnail {
    padding: $thumbnailPadding;
    line-height: $lineHeightBase;
    background-color: $thumbnailBg;
    border: $thumbnailBdWidth solid $thumbnailBdColor;
    border-radius: $thumbnailBdRadius;
    @include transition(all .2s ease-in-out);

    // Keep them at most 100% wide
    @include imgResponsive($display: inline-block);
}

// Perfect circle
.img-circle {
    border-radius: 50%;
}


//
// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/
//
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0 0 0 0);
    border: 0;
}


//
// CSS3 Flexbox Utility Classes
//
// must set $usingFlexbox to true
//
@if $usingFlexbox {
    .flexbox, .flexboxlegacy { // requires Modernizr.js

        .hbox {
            @include boxOrient(horizontal);
            @include boxDirection(normal);
            @if $ie-support {
                // IE10 will use the "hybrid" -ms-flexDirection
                // which combines boxOrient and boxDirection
                @include flexDirection(inline);
                &.rev {
                    @include flexDirection(inline-reverse);
                }
            }
            width: 100%;
        }

        .vbox, .vpage {
            @include boxOrient(vertical);
            @include boxDirection(normal);
            @if $ie-support {
                // IE10 will use the "hybrid" -ms-flexDirection
                // which combines boxOrient and boxDirection
                @include flexDirection(block);
                &.rev {
                    @include flexDirection(block-reverse);
                }
            }
            width: auto;
        }

        .vpage {

            @include displayBox;
            @include boxAlign(stretch);
            @include boxDirection(normal);

        }

        .hbox, .vbox {

            @include box-sizing(border-box);
            @include displayBox;
            @include boxAlign(stretch);
            @include boxDirection(normal); // reverse is equivalent to float: right; | normal is equivalent to float: left;

            &.rev {
                @include boxDirection(reverse);
            }

            > .box {
                @include boxFlex(1);
                display: block;

                &.vbox, &.hbox {
                    @include displayBox;
                }
            }

        }


        @for $i from 0 through 10 {
            .flex#{$i} {
                @include boxFlex($i !important);
            }
        }

    } // END .flexbox, .flexboxlegacy
}