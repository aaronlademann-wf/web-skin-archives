//----------------------------------------------------

//+  PARTIAL:  _navs.scss
//+  PARENT:   wdesk.scss

    // related partials:
    //+ "_navbar.scss"
    //+ "_pagination.scss"
    //+ "_pager.scss"

//----------------------------------------------------


//
// Base Nav class
//
    .nav {
        margin-bottom: 0;
        margin-left: 0;
        padding-left: 0; // Override default ul/ol
        list-style: none;
        background-color: $navLinkBg;
        font-family: $webfontSansSerif;
        font-weight: normal;
        @include box-sizing($nav-box-sizing-default);

        //
        // GLOBAL NAVIGATION ELEMENT STATES
        //
        // HOVER / FOCUS / PRESSED / ACTIVE
        //
        > li {
            display: block; // END .nav > li.active

            &,
            > .hitarea {
                &,
                * {
                    // not a selectable piece of text
                    @include disableUserSelect;
                }
            }

            > .hitarea {
                position: relative;
                z-index: 1; // keep below .active > .hitarea
                display: block;
                // should never overflow its container
                overflow: hidden;
                padding: gibsonPadOffset($navLinkPadding);
                text-overflow: ellipsis;
                color: $navLinkColor;

                .icon {
                    margin-right: (stripUnit(nth($navLinkPadding, 2)) / 2) + 0px;
                }
                // caret color should match the nav border color
                .caret { border-top-color: $navBdColor; }
                // badges appear with reverse contrast
                .badge {
                    color: if($navLinkBg == transparent, #fff, $navLinkBg);
                    background-color: $navLinkColor;
                }

                // .hitarea HOVER STATE
                #{$linkHoverFocus} {
                    @extend %nav-link-hover;
                }

                // .hitarea PRESSED STATE
                #{$linkPressed} {
                    @extend %nav-link-press;
                }

                // .hitarea DISABLED STATE
                &.disabled,
                &[disabled] {
                    // Nuke hover effects
                    cursor: not-allowed !important;
                    text-decoration: none !important;
                    // Gray out text
                    color: $navLinkColorDisabled !important;
                    background-color: transparent !important;
                    // caret color should match the text color
                    .caret { border-top-color: $navLinkColorDisabled !important; }
                }
            } // END .nav > li > .hitarea

            &.active,
            &.open {
                > .hitarea {
                    // keep above the non-active hitareas (helpful for active dropups for instance)
                    // and keep above the active dropdown/up
                    z-index: 4;
                    color: $navLinkColorActive;
                    outline: 0;
                    background-color: $navLinkBgActive; // they are already here
                    // caret color should match the link color
                    .caret { border-top-color: $navLinkColorActive; }
                    // badges appear with reverse contrast
                    .badge {
                        color: if($navLinkBg == transparent, #fff, $navLinkBg);
                        background-color: $navLinkColorActive;
                    }

                    // if its a dropdown toggle... it doesn't matter that they are "already here"
                    // they can still click it
                    &.dropdown-toggle {
                        cursor: pointer !important;
                    }
                }
            }
        }
    } // END .nav (base class)


//
// Nav Variations
//

//
// Nav Tabs
//
    .nav-tabs {
        @include clearfix;
        // provide some separation from tab-content
        margin-bottom: $navTabContentSpacing; // END .tabs-right .nav-tabs
        // Give the tabs something to sit on
        border-bottom: $navTabBdWidth solid $navTabBdColor;
        // Make the list-items overlay the bottom border
        > li {
            float: left;
            // Make the list-items overlay the bottom border
            margin-bottom: -#{$navTabBdWidth};

            // Actual tabs
            > .hitarea {
                margin-right: $navTabSpacing;
                border: $navTabBdWidth solid transparent;
                @include border-top-radius($borderRadiusBase);
                line-height: $lineHeightBase; // prevent shifting when tab becomes active
                @include ltie8 {
                    *border-color: $navLinkBg;
                }
            }

            // Active state, and it's :hover to override normal :hover
            &.active,
            &.open {
                > .hitarea {
                    cursor: default; // can't click on it
                    border-color: $navTabBdColor;
                     // make the bg color of the tab "bleed" through the bottom border
                    border-bottom-color: transparent;
                    background-color: $navLinkBgActive;
                    font-weight: bold;
                    @include ltie8 {
                        *border-bottom-color: $navTabBgActive;
                    }

                    #{$linkPressed} {
                        // bg cannot be transparent here, because we need to mask the border behind it.
                        background-color: if($navLinkBg == transparent, #fff, $navLinkBg);
                    }
                }
            }

            &.open {
                > .hitarea {
                    // don't bold the font just for a dropdown activating
                    font-weight: normal;
                }
            }

            //
            // Disabled state
            //
            > .hitarea.disabled,
            > .hitarea[disabled] {
                cursor: not-allowed !important;
                text-decoration: none !important;
                color: $navLinkColorDisabled !important;
                background-color: $navLinkBgDisabled !important;

                .badge {
                    color: if($navLinkBgDisabled == transparent, $white, $navLinkBgDisabled) !important;
                    background-color: $navLinkColorDisabled !important;
                }
            }
        } // END .nav-tabs > li


        //
        // DROPDOWN MENUS IN NAV-TABS
        //
        .dropdown {
            > .dropdown-menu {
                // the z-index should be inherited from the nav component
                // also helps to ensure adacent active tabs won't be overlapped by the bg of the dropdown
                z-index: 1;
                margin-top: -#{$navTabBdWidth};
                border-color: $navTabBdColor;
                @include border-top-radius(0);
            }
        }
        // right aligned
        &.pull-right .dropdown > .dropdown-menu,
        .dropdown.pull-right > .dropdown-menu,
        .dropdown > .dropdown-menu.pull-right {
            right: $navTabSpacing;
            left: auto;
        }

        // prevent content from running below tabs
        + .tab-content { overflow: auto; }


    //
    // Tabs in any direction
    //
        //
        // BOTTOM
        //
        .tabs-below > & {
            margin-bottom: 0;
            border-bottom: none;
            border-top: $navTabBdWidth solid $navTabBdColor;

            > li {
                margin-top: -#{$navTabBdWidth};
                margin-bottom: 0;

                > .hitarea {
                    border-radius: 0;
                    @include border-bottom-radius($borderRadiusBase);
                }

                //
                // Active State
                //
                &.active,
                &.open {
                    > .hitarea {
                        border-color: $navTabBdColor;
                        border-top-color: transparent;
                        @include ltie8 {
                            *border-top-color: $navTabBgActive;
                        }
                    }
                }
            } // END .tabs-below > .nav-tabs > li

            //
            // DROPDOWNS SHOULD DROP UP
            // and have a flat bottom edge that connects flush
            //
            // with the button inside of .tabs-below
            //
            .dropdown,
            .dropup {
                > .dropdown-menu {
                    margin-bottom: -#{$navTabBdWidth};
                    border-color: $navTabBdColor;
                    @include border-bottom-radius(0);
                }
            }
        } // END .tabs-below > .nav-tabs

        // Tabs on the left
        .tabs-left > & {
            width: auto;
            float: left;
            margin-right: $navTabContentSpacing;
            margin-bottom: 0;
            border-right: $navTabBdWidth solid $navTabBdColor;
            border-bottom: none;

            > li {
                float: none;
                > .hitarea {
                    min-width: $navTabVerticalMinWidth;
                    margin-right: -#{$navTabBdWidth};
                    margin-bottom: $navTabSpacing;
                    border-radius: 0;
                    @include border-left-radius($borderRadiusBase);
                }

                //
                // Active State
                //
                &.active,
                &.open {
                    > .hitarea {
                        border-color: $navTabBdColor;
                        border-right-color: transparent;
                        @include ltie8 {
                            *border-right-color: $navTabBgActive;
                        }
                    }
                }
            }
        } // END .tabs-left .nav-tabs

        // Tabs on the right
        .tabs-right > & {
            width: auto;
            float: right;
            margin-bottom: 0;
            margin-left: $navTabContentSpacing;
            border-bottom: none;
            border-left: $navTabBdWidth solid $navTabBdColor;

            > li {
                float: none;
                > .hitarea {
                    min-width: $navTabVerticalMinWidth;
                    margin-right: 0;
                    margin-bottom: $navTabSpacing;
                    margin-left: -#{$navTabBdWidth};
                    border-radius: 0;
                    @include border-right-radius($borderRadiusBase);
                }

                //
                // Active State
                //
                &.active,
                &.open {
                    > .hitarea {
                        border-color: $navTabBdColor;
                        border-left-color: transparent;
                        @include ltie8 {
                            *border-left-color: $navTabBgActive;
                        }
                    }
                }
            }
        }
    } // END .nav-tabs


//
// Nav Pills
//
    .nav-pills {
        @include clearfix;
        > li {
            float: left;

            + li > .hitarea {
                margin-left: $pillTabSpacing * 2;
            }

            > .hitarea {
                @include navPillItemDefault;

                //
                // Hover / Focus State
                //
                #{$linkHoverFocus} {
                    @include navPillItemHoverDefault;
                }

                //
                // PRESSED State
                //
                #{$linkPressed} {
                    @include navPillItemPressDefault;
                }
            } // END .nav-pills > li > .hitarea


            //
            // Active State
            //
            &.active,
            &.open {
                > .hitarea {
                    @include navPillItemActiveDefault;
                }
            }

            //
            // Disabled state
            //
            > .hitarea.disabled,
            > .hitarea[disabled] {
                @include navPillItemDisabledDefault;
            }
        } // END .nav-pills > li

        //
        // DROPDOWN MENUS IN NAV-PILLS
        //
        .dropdown {
            > .dropdown-menu {
                left: $pillTabSpacing * 2;
            }
        }
        // right aligned
        &.pull-right .dropdown > .dropdown-menu,
        .dropdown.pull-right > .dropdown-menu,
        .dropdown > .dropdown-menu.pull-right {
            right: 0;
            left: auto;
        }
    } // END .nav-pills


//
// Vertical Nav Base Classes
//
// Stacked pills / nav-list
//
    .nav-stacked,
    .nav-list {

        > li {
            float: none;

            + li > .hitarea {
                margin-top: $pillTabSpacingStacked;
                margin-left: 0;
            }

            // redeclare larger padding since .nav-pills horizontally are different
            > .hitarea {
                padding: gibsonPadOffset($navLinkPadding);
                // just in case a <button> elem is used for the hitarea
                width: 100%;
                text-align: left;

                .icon {
                    // valign navLink icons
                    $navLinkIconHeight: $navLinkHeight - (nth($navLinkPadding, 1) * 2);
                    width:  $navLinkIconHeight;
                    height: $navLinkIconHeight;
                    margin-right: $spacingBase;
                    &:before,
                    &:after { line-height: $navLinkIconHeight; }

                    &.pull-right {
                        position: absolute;
                        right: 0;
                        left: auto;
                        height: $navLinkHeight;
                        &:before,
                        &:after {
                            line-height: $navLinkHeight;
                        }
                    }
                }
            }

            &.active {
                > .hitarea {
                    z-index: 2; // Bring active item forward so border sits on top of next element
                }
            }
        } // END vertical .nav > li
    } // END vertical .nav


//
// Nav Lists
//
    .nav-list {
        > li {
            margin-bottom: -#{$navListBdWidth}; // pull up the following link for a 1px border between
            background-color: $navListLinkBg;
            border-top: $navListBdWidth solid $navListBdColor;
            border-bottom: $navListBdWidth solid $navListBdColor;

            &:first-child,
            &.no-border {
                border-top-color: transparent;
                border-bottom-color: transparent;
            }

            &:last-child {
                border-bottom-color: transparent;
                margin-bottom: 0;
            }


            // little extra space between "groups" of nav-list items
            &.nav-group-border {
                margin-top: $navListGroupBdSpacing;
                // slightly less padding, to adjust based on negative bottom margin
                padding-top: $navListGroupBdSpacing - $navListBdWidth;
            }

            > .hitarea {

                // HOVER / FOCUS STATE
                #{$linkHoverFocus} {
                    @extend %vertical-nav-link-hover;
                }

                // PRESSED STATE
                #{$linkPressed} {
                    @extend %vertical-nav-link-press;
                }

            } // END .nav-list > li > .hitarea

            // override .nav-stacked default
            + li > .hitarea { margin-top: 0; }

            //
            // Active State
            //
            &.active {
                > .hitarea {
                    font-weight: bold;
                    color: $navListLinkColorActive;
                    background-color: $navListLinkBgActive;

                    // PRESSED STATE
                    #{$linkPressed} {
                        color: $navListLinkColorActive;
                        background-color: $navListLinkBgActive;
                    }

                    .badge {
                        color: if($navListLinkBgActive == transparent, $navListLinkBg, $navListLinkBgActive);
                        background-color: $navListLinkColorActive;
                    }
                }
            }

            //
            // Disabled state
            //
            > .hitarea.disabled,
            > .hitarea[disabled] {
                cursor: not-allowed !important;
                text-decoration: none !important;
                color: $navListLinkColorDisabled !important;
                background-color: $navListLinkBgDisabled !important;

                .badge {
                    color: if($navListLinkBgDisabled == transparent, $white, $navListLinkBgDisabled) !important;
                    background-color: $navListLinkColorDisabled !important;
                }
            }

        } // END .nav-list > li


    //
    // "Bordered" Vertical Nav List
    //
        &.nav-list-bordered {
            > li {
                border: $navListBdWidth solid $navListBdColor;
                &:last-child {
                    margin-bottom: 0;
                }
            }
        }


    //
    // "Collapsible" Vertical Nav List
    //
        &.nav-list-collapsible {
            li {
                // Beyond 1st level of nesting
                .nav { padding-left: $navListLinkCollapsingPaddingLeft; }
                li {
                    // override reduced font size of nested <li>'s
                    font-size: $fontSizeBase;
                    border: 0 none;
                }
                &.active {
                    .hitarea {
                        // override default "active" style since collapsible stuff can still be clicked.
                        &,
                        .caret {
                            cursor: pointer;
                        }
                    }
                }

                // caret direction
                .hitarea {
                    // non-collapsing buttons should align with collapsing ones
                    padding-left: $navListLinkCollapsingPaddingLeft;
                    // handle overflowing text
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;

                    // global caret size
                    .caret {
                        // we're going to use the psuedo element... so zero out the default
                        border: 0 none;
                        height: $navListCaretContainerHeight;
                        width: $navListCaretContainerWidth;
                        position: absolute;
                        left: 0;
                        top: 0;

                        &:after {
                            position: absolute;
                            // center actual caret within .caret's height / width
                            top: $navListCaretMarginVerticalCollapsed;
                            left: $navListCaretMarginHorizontalCollapsed;
                            content: "";
                            @include caret('all', $navListCaretColor);
                        }

                        // When the actual caret is hovered
                        #{$linkHoverFocus} {
                            // slightly darker than the surrounding hitarea so there is a distinction
                            background-color: $menuVLinkBgPress;
                        }
                    }

                    // STANDARD (pointing right)
                    &.collapsed {
                        .caret {
                            &:after {
                                @include caret('right', $navListCaretColor, $fallbackColor: $navListCaretColorFallback);
                            }

                            // When the actual caret is hovered
                            #{$linkHoverFocus} {
                                &:after {
                                    border-left-color: $navListLinkColorHover;
                                }
                            }
                        }
                    }

                    // EXPANDED SUB MENU (pointing down)
                    &.open {
                        .caret {
                            &:after {
                                top: $navListCaretMarginVertical;
                                left: $navListCaretMarginHorizontal;
                                @include caret('down', $navListCaretColorActive);
                            }

                            // When the actual caret is hovered
                            #{$linkHoverFocus} {
                                &:after {
                                    border-top-color: $navListLinkColorHover;
                                }
                            }
                        }
                    }
                }
            }
        }

    //
    // "Nested" Vertical Nav List
    //
    // e.g. menus in popovers
    // when a nav-list is inside another component
    //
    // TODO: remove this once 0.5.0 .navbar-nav is implemented
    //
    //
        .popover .content > & {
            @include linedListMenu;
            float: none !important;
            // make it flush like a dropdown menu
            $pad: $dialogContentPadding;
            margin: -#{$pad} -#{$pad} -#{$pad - 1} -#{$pad};

            // override linedListMenu padding designed for non-clickable elems
            > li {
                float: none !important;
                padding: 0 !important;
                height: auto !important;
                > .hitarea {
                    height: auto !important;
                    padding: $menuVLinkPaddingVertical 0 ($menuVLinkPaddingVertical - 1);

                    * {
                        // don't know why this is automatically inherited by .hitarea children... but it is.
                        text-indent: 0 !important;
                    }
                }

                // when a lined list menu is contained within .content
                // it already has "boundaries" marked by the popover, dropdown, etc...
                &:first-child > .hitarea { @include border-top-right-radius($dialogBdRadius); }
            }
        } // END nested .nav-list

        .popover .content.flush > & {
            margin: 0;
            margin-top: -#{$dialogContentPadding};
        }

        .content:last-of-type > &:last-of-type {
            > li {
                &:last-child,
                &.last { border-bottom: 0 none; }
            }
        }
    } // END .nav-list


//
// Justified nav links
//
    .nav-justified {
        width: 100%;

        //
        // STACKED BY DEFAULT (MOBILE FIRST)
        //
        > li {
            float: none;
            > .hitarea {
                // Override margin from .nav-pills
                margin-left: 0 !important;
                margin-bottom: $pillTabSpacingStacked;
                text-align: center;
                border-radius: $borderRadiusBase;
            }

            &.dropdown .dropdown-menu {
                top: auto;
                left: auto;
                border-radius: $borderRadiusBase;
            }
        }

        &.nav-tabs {
            border-bottom: 0;

            > li {
                > .hitarea {
                    // Override margin from .nav-tabs
                    margin-right: 0;
                    @include border-bottom-radius(0);
                }

                &.active,
                &.open {
                    > .hitarea {
                        &,
                        #{$linkHoverFocus} {
                            border: $navTabBdWidth solid $navTabBdColor;
                        }
                    }
                }
            }
        }


        //
        // JUSTIFIED AT LARGER THAN 767px
        //
        @media (min-width: $screenTabletMin) {
            @include navLinksJustified;

            &.nav-tabs {
                @include navTabsJustified;
            }

            &.nav-pills {
                @include navPillsJustified;
            }
        } // END @media min-width $screenTabletMin


        //
        // HALVE JUSTIFIED MENUS ARE NOT COLLAPSED BY MEDIA QUERY
        //
        // action button containers that have only two buttons
        // tweak so that they are equal widths
        //
        &.halve {
            @include navLinksJustified;

            > li {
                display: block;
                float: left;
                width: $navJustifiedHalvedWidth;
                margin-right: $navJustifiedHalvedMargin;
                border-left: 0 none !important;
                &:last-child {
                    margin-right: 0;
                }
            }
        } // END .nav-justified.halve


        //
        // JUSTIFIED WIZARDS ARE NOT COLLAPSED BY MEDIA QUERY
        //
        // this requires .nav and .nav-pills classes as well
        // but we're leaving it off here to not be overly specific
        //
        &.nav-wizard {
            @include navPillsWizardJustified;
        } // END .nav-wizard.nav-justified
    } // END .nav-justified


//
// Nav addons
//
    //
    // Nav Dividers
    //
    // (basically an hr) within the nav
    //
        .nav .divider {
            @include dividerHorizontal($bg: $navBgDefault, $margin: $navDividerMargin);
        }


//
// Nav Utility Classes
//
    // by detecting when a nav item has been overflowed (mostly on dropdowns and context menus)
    // we can ensure that the text doesn't get clipped
    .overflowed {
        // scroll vertically
        overflow-x: hidden;
        overflow-y: auto;
        // make room for scrollbars
        @include scrollbarCompensation;

        > li {
            > .hitarea {
                display: inline-block;
                @include ie7-inline-block;
                @include scrollbarCompensation($menuVLinkPaddingHorizontal);
                @include box-sizing(content-box);
            }
        }
    }

    // reset important precedents
    input.overflowed {
        overflow: hidden;
    }

    // Redeclare pull classes because of specifity
    // TODO: consider making these utilities !important to avoid this bullshit
    .nav > .pull-right {
        float: right;
    }

    // Clear any floats
    .tabbable { @include clearfix; }
    // Show/hide tabbable areas
    .tab-content > .tab-pane,
    .pill-content > .pill-pane { display: none; }

    .tab-content > .active,
    .pill-content > .active { display: block; }
